
events { }

http {
  add_header 'Access-Control-Allow-Origin' 'localhost';
  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';
  add_header Content-Security-Policy "upgrade-insecure-requests;";
  add_header X-Frame-Options "DENY";
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-XSS-Protection "1; mode=block";
  add_header Expect-CT "enforce, max-age=300, report-uri='https://localhost/'";
  add_header X-Content-Type-Options nosniff;
  add_header 'Referrer-Policy' 'strict-origin-when-cross-origin';
  add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";
  add_header Set-Cookie "Path=/; HttpOnly; Secure";
  add_header Public-Key-Pins 'pin-sha256="PRIMARY-PIN"; pin-sha256="BACKUP-PIN"; max-age=300; includeSubDomains';
  add_header X-Permitted-Cross-Domain-Policies master-only;
  add_header Cross-Origin-Embedder-Policy require-corp;
  add_header Cross-Origin-Opener-Policy same-origin;
  add_header Cross-Origin-Resource-Policy same-origin;
  expires 1y;
  add_header Cache-Control "must-revalidate";
  proxy_hide_header X-Powered-By;
  server_tokens off;
  

  limit_req_zone $postman_bot zone=ratelimit:1m rate=10r/s;
  limit_req_status 429;
  limit_req zone=ratelimit;
  

  charset utf-8;

  map $http_user_agent $postman_bot {
    default "";
    PostmanRuntime/7.29.0 1;
  }

  
  # Reverse proxy to oauth2-proxy
  server {
    listen 80;

    return 301 https://$host$request_uri;
  }

  server {

    listen 443 ssl;
    ssl_certificate     /etc/nginx/localhost.crt;
    ssl_certificate_key /etc/nginx/localhost.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    #For cipher tests
    #ssl_ciphers   HIGH:!aNULL:!MD5;
    server_name  oauth2-proxy.oauth2-proxy.localhost;

    location / {

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header Host       $host;
      proxy_set_header X-Real-IP  $remote_addr;

      proxy_pass http://oauth2-proxy:4180/;
    }
  }

  # Reverse proxy to hapi
  server {
    listen 443 ssl;
    ssl_certificate     /etc/nginx/localhost.crt;
    ssl_certificate_key /etc/nginx/localhost.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    #For cipher tests
    #ssl_ciphers   HIGH:!aNULL:!MD5;
    server_name hapi.oauth2-proxy.localhost;

    

    # If the auth_request denies the request (401), redirect to the sign_in page
    # and include the final rd URL back to the user's original request.
    error_page 401 = https://oauth2-proxy.oauth2-proxy.localhost/oauth2/sign_in?rd=$scheme://$host$request_uri;

    # Alternatively send the request to `start` to skip the provider button
    # error_page 401 = http://oauth2-proxy.oauth2-proxy.localhost/oauth2/start?rd=$scheme://$host$request_uri;

    location / {

      add_header Set-Cookie "access-token=$upstream_http_x_auth_request_access_token; Path=/";

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_pass https://hapi-fhir-jpaserver-start:8080/;
    }

    # auth_request must be a URI so this allows an internal path to then proxy to
    # the real auth_request path.
    # The trailing /'s are required so that nginx strips the prefix before proxying.
    location /internal-auth/ {

      auth_request /internal-auth/oauth2/auth;
      internal; # Ensure external users can't access this path

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header Host       $host;
      proxy_set_header X-Real-IP  $remote_addr;

      proxy_pass http://oauth2-proxy:4180/;
    }

  }
}