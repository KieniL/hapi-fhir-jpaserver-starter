
events { }

http {

  charset utf-8;

  map $http_user_agent $postman_bot {
    default "";
    PostmanRuntime/7.29.0 1;
  }

  limit_req_zone $postman_bot zone=ratelimit:1m rate=10r/s;
  limit_req_status 429;
  # Reverse proxy to oauth2-proxy
  server {
    listen 80;
    server_name localhost;

    # location /fhir {
    #   proxy_set_header Host       $host;
    #   proxy_set_header X-Real-IP  $remote_addr;

    #   proxy_pass http://hapi-fhir-jpaserver-start:8080/fhir;
    # }
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    ssl_certificate     /etc/nginx/localhost.crt;
    ssl_certificate_key /etc/nginx/localhost.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    server_name  oauth2-proxy.oauth2-proxy.localhost;

    location / {
      proxy_set_header Host       $host;
      proxy_set_header X-Real-IP  $remote_addr;

      proxy_pass http://oauth2-proxy:4180/;
    }
  }

  # Reverse proxy to hapi
  server {
    listen 443 ssl;
    ssl_certificate     /etc/nginx/localhost.crt;
    ssl_certificate_key /etc/nginx/localhost.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    server_name hapi.oauth2-proxy.localhost;

    auth_request /internal-auth/oauth2/auth;

    # If the auth_request denies the request (401), redirect to the sign_in page
    # and include the final rd URL back to the user's original request.
    error_page 401 = https://oauth2-proxy.oauth2-proxy.localhost/oauth2/sign_in?rd=$scheme://$host$request_uri;

    # Alternatively send the request to `start` to skip the provider button
    # error_page 401 = http://oauth2-proxy.oauth2-proxy.localhost/oauth2/start?rd=$scheme://$host$request_uri;

    location / {
      proxy_pass http://hapi-fhir-jpaserver-start:8080/;
    }
    location /fhir {
      proxy_pass http://hapi-fhir-jpaserver-start:8080/fhir;
    }

    # auth_request must be a URI so this allows an internal path to then proxy to
    # the real auth_request path.
    # The trailing /'s are required so that nginx strips the prefix before proxying.
    location /internal-auth/ {
      internal; # Ensure external users can't access this path

      # Make sure the OAuth2 Proxy knows where the original request came from.
      proxy_set_header Host       $host;
      proxy_set_header X-Real-IP  $remote_addr;

      proxy_pass http://oauth2-proxy:4180/;
    }
  }
}